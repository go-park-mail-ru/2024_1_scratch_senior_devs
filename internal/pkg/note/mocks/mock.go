// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock_note is a generated GoMock package.
package mock_note

import (
	context "context"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2024_1_scratch_senior_devs/internal/models"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/satori/uuid"
)

// MockNoteUsecase is a mock of NoteUsecase interface.
type MockNoteUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockNoteUsecaseMockRecorder
}

// MockNoteUsecaseMockRecorder is the mock recorder for MockNoteUsecase.
type MockNoteUsecaseMockRecorder struct {
	mock *MockNoteUsecase
}

// NewMockNoteUsecase creates a new mock instance.
func NewMockNoteUsecase(ctrl *gomock.Controller) *MockNoteUsecase {
	mock := &MockNoteUsecase{ctrl: ctrl}
	mock.recorder = &MockNoteUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNoteUsecase) EXPECT() *MockNoteUsecaseMockRecorder {
	return m.recorder
}

// CreateNote mocks base method.
func (m *MockNoteUsecase) CreateNote(arg0 context.Context, arg1 uuid.UUID) (models.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNote", arg0, arg1)
	ret0, _ := ret[0].(models.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNote indicates an expected call of CreateNote.
func (mr *MockNoteUsecaseMockRecorder) CreateNote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNote", reflect.TypeOf((*MockNoteUsecase)(nil).CreateNote), arg0, arg1)
}

// GetAllNotes mocks base method.
func (m *MockNoteUsecase) GetAllNotes(arg0 context.Context, arg1 uuid.UUID, arg2, arg3 int64, arg4 string) ([]models.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllNotes", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]models.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllNotes indicates an expected call of GetAllNotes.
func (mr *MockNoteUsecaseMockRecorder) GetAllNotes(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllNotes", reflect.TypeOf((*MockNoteUsecase)(nil).GetAllNotes), arg0, arg1, arg2, arg3, arg4)
}

// GetNote mocks base method.
func (m *MockNoteUsecase) GetNote(arg0 context.Context, arg1, arg2 uuid.UUID) (models.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNote", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNote indicates an expected call of GetNote.
func (mr *MockNoteUsecaseMockRecorder) GetNote(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNote", reflect.TypeOf((*MockNoteUsecase)(nil).GetNote), arg0, arg1, arg2)
}

// MockNoteRepo is a mock of NoteRepo interface.
type MockNoteRepo struct {
	ctrl     *gomock.Controller
	recorder *MockNoteRepoMockRecorder
}

// MockNoteRepoMockRecorder is the mock recorder for MockNoteRepo.
type MockNoteRepoMockRecorder struct {
	mock *MockNoteRepo
}

// NewMockNoteRepo creates a new mock instance.
func NewMockNoteRepo(ctrl *gomock.Controller) *MockNoteRepo {
	mock := &MockNoteRepo{ctrl: ctrl}
	mock.recorder = &MockNoteRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNoteRepo) EXPECT() *MockNoteRepoMockRecorder {
	return m.recorder
}

// CreateNote mocks base method.
func (m *MockNoteRepo) CreateNote(arg0 context.Context, arg1 models.Note) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNote", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNote indicates an expected call of CreateNote.
func (mr *MockNoteRepoMockRecorder) CreateNote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNote", reflect.TypeOf((*MockNoteRepo)(nil).CreateNote), arg0, arg1)
}

// ReadAllNotes mocks base method.
func (m *MockNoteRepo) ReadAllNotes(arg0 context.Context, arg1 uuid.UUID, arg2, arg3 int64, arg4 string) ([]models.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAllNotes", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]models.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAllNotes indicates an expected call of ReadAllNotes.
func (mr *MockNoteRepoMockRecorder) ReadAllNotes(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAllNotes", reflect.TypeOf((*MockNoteRepo)(nil).ReadAllNotes), arg0, arg1, arg2, arg3, arg4)
}

// ReadNote mocks base method.
func (m *MockNoteRepo) ReadNote(arg0 context.Context, arg1 uuid.UUID) (models.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadNote", arg0, arg1)
	ret0, _ := ret[0].(models.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadNote indicates an expected call of ReadNote.
func (mr *MockNoteRepoMockRecorder) ReadNote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadNote", reflect.TypeOf((*MockNoteRepo)(nil).ReadNote), arg0, arg1)
}
