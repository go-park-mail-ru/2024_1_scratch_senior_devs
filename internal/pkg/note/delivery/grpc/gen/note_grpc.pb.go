// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: note.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NoteClient is the client API for Note service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NoteClient interface {
	GetAllNotes(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error)
	GetNote(ctx context.Context, in *GetNoteRequest, opts ...grpc.CallOption) (*GetNoteResponseResponse, error)
	GetPublicNote(ctx context.Context, in *GetPublicNoteRequest, opts ...grpc.CallOption) (*GetNoteResponseResponse, error)
	AddNote(ctx context.Context, in *AddNoteRequest, opts ...grpc.CallOption) (*AddNoteResponse, error)
	UpdateNote(ctx context.Context, in *UpdateNoteRequest, opts ...grpc.CallOption) (*UpdateNoteResponse, error)
	DeleteNote(ctx context.Context, in *DeleteNoteRequest, opts ...grpc.CallOption) (*DeleteNoteResponse, error)
	CreateSubNote(ctx context.Context, in *CreateSubNoteRequest, opts ...grpc.CallOption) (*CreateSubNoteResponse, error)
	AddCollaborator(ctx context.Context, in *AddCollaboratorRequest, opts ...grpc.CallOption) (*AddCollaboratorResponse, error)
	AddTag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*GetNoteResponse, error)
	DeleteTag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*GetNoteResponse, error)
	GetTags(ctx context.Context, in *GetTagsRequest, opts ...grpc.CallOption) (*GetTagsResponse, error)
	CheckPermissions(ctx context.Context, in *CheckPermissionsRequest, opts ...grpc.CallOption) (*CheckPermissionsResponse, error)
	RememberTag(ctx context.Context, in *AllTagRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	ForgetTag(ctx context.Context, in *AllTagRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	UpdateTag(ctx context.Context, in *UpdateTagRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	SetIcon(ctx context.Context, in *SetIconRequest, opts ...grpc.CallOption) (*GetNoteResponse, error)
	SetHeader(ctx context.Context, in *SetHeaderRequest, opts ...grpc.CallOption) (*GetNoteResponse, error)
	AddFav(ctx context.Context, in *ChangeFlagRequest, opts ...grpc.CallOption) (*GetNoteResponse, error)
	DelFav(ctx context.Context, in *ChangeFlagRequest, opts ...grpc.CallOption) (*GetNoteResponse, error)
	SetPublic(ctx context.Context, in *AccessModeRequest, opts ...grpc.CallOption) (*GetNoteResponse, error)
	SetPrivate(ctx context.Context, in *AccessModeRequest, opts ...grpc.CallOption) (*GetNoteResponse, error)
	GetAttachList(ctx context.Context, in *GetAttachListRequest, opts ...grpc.CallOption) (*GetAttachListResponse, error)
	GetSharedAttachList(ctx context.Context, in *GetSharedAttachListRequest, opts ...grpc.CallOption) (*GetAttachListResponse, error)
}

type noteClient struct {
	cc grpc.ClientConnInterface
}

func NewNoteClient(cc grpc.ClientConnInterface) NoteClient {
	return &noteClient{cc}
}

func (c *noteClient) GetAllNotes(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error) {
	out := new(GetAllResponse)
	err := c.cc.Invoke(ctx, "/note.Note/GetAllNotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteClient) GetNote(ctx context.Context, in *GetNoteRequest, opts ...grpc.CallOption) (*GetNoteResponseResponse, error) {
	out := new(GetNoteResponseResponse)
	err := c.cc.Invoke(ctx, "/note.Note/GetNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteClient) GetPublicNote(ctx context.Context, in *GetPublicNoteRequest, opts ...grpc.CallOption) (*GetNoteResponseResponse, error) {
	out := new(GetNoteResponseResponse)
	err := c.cc.Invoke(ctx, "/note.Note/GetPublicNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteClient) AddNote(ctx context.Context, in *AddNoteRequest, opts ...grpc.CallOption) (*AddNoteResponse, error) {
	out := new(AddNoteResponse)
	err := c.cc.Invoke(ctx, "/note.Note/AddNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteClient) UpdateNote(ctx context.Context, in *UpdateNoteRequest, opts ...grpc.CallOption) (*UpdateNoteResponse, error) {
	out := new(UpdateNoteResponse)
	err := c.cc.Invoke(ctx, "/note.Note/UpdateNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteClient) DeleteNote(ctx context.Context, in *DeleteNoteRequest, opts ...grpc.CallOption) (*DeleteNoteResponse, error) {
	out := new(DeleteNoteResponse)
	err := c.cc.Invoke(ctx, "/note.Note/DeleteNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteClient) CreateSubNote(ctx context.Context, in *CreateSubNoteRequest, opts ...grpc.CallOption) (*CreateSubNoteResponse, error) {
	out := new(CreateSubNoteResponse)
	err := c.cc.Invoke(ctx, "/note.Note/CreateSubNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteClient) AddCollaborator(ctx context.Context, in *AddCollaboratorRequest, opts ...grpc.CallOption) (*AddCollaboratorResponse, error) {
	out := new(AddCollaboratorResponse)
	err := c.cc.Invoke(ctx, "/note.Note/AddCollaborator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteClient) AddTag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*GetNoteResponse, error) {
	out := new(GetNoteResponse)
	err := c.cc.Invoke(ctx, "/note.Note/AddTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteClient) DeleteTag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*GetNoteResponse, error) {
	out := new(GetNoteResponse)
	err := c.cc.Invoke(ctx, "/note.Note/DeleteTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteClient) GetTags(ctx context.Context, in *GetTagsRequest, opts ...grpc.CallOption) (*GetTagsResponse, error) {
	out := new(GetTagsResponse)
	err := c.cc.Invoke(ctx, "/note.Note/GetTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteClient) CheckPermissions(ctx context.Context, in *CheckPermissionsRequest, opts ...grpc.CallOption) (*CheckPermissionsResponse, error) {
	out := new(CheckPermissionsResponse)
	err := c.cc.Invoke(ctx, "/note.Note/CheckPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteClient) RememberTag(ctx context.Context, in *AllTagRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/note.Note/RememberTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteClient) ForgetTag(ctx context.Context, in *AllTagRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/note.Note/ForgetTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteClient) UpdateTag(ctx context.Context, in *UpdateTagRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/note.Note/UpdateTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteClient) SetIcon(ctx context.Context, in *SetIconRequest, opts ...grpc.CallOption) (*GetNoteResponse, error) {
	out := new(GetNoteResponse)
	err := c.cc.Invoke(ctx, "/note.Note/SetIcon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteClient) SetHeader(ctx context.Context, in *SetHeaderRequest, opts ...grpc.CallOption) (*GetNoteResponse, error) {
	out := new(GetNoteResponse)
	err := c.cc.Invoke(ctx, "/note.Note/SetHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteClient) AddFav(ctx context.Context, in *ChangeFlagRequest, opts ...grpc.CallOption) (*GetNoteResponse, error) {
	out := new(GetNoteResponse)
	err := c.cc.Invoke(ctx, "/note.Note/AddFav", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteClient) DelFav(ctx context.Context, in *ChangeFlagRequest, opts ...grpc.CallOption) (*GetNoteResponse, error) {
	out := new(GetNoteResponse)
	err := c.cc.Invoke(ctx, "/note.Note/DelFav", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteClient) SetPublic(ctx context.Context, in *AccessModeRequest, opts ...grpc.CallOption) (*GetNoteResponse, error) {
	out := new(GetNoteResponse)
	err := c.cc.Invoke(ctx, "/note.Note/SetPublic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteClient) SetPrivate(ctx context.Context, in *AccessModeRequest, opts ...grpc.CallOption) (*GetNoteResponse, error) {
	out := new(GetNoteResponse)
	err := c.cc.Invoke(ctx, "/note.Note/SetPrivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteClient) GetAttachList(ctx context.Context, in *GetAttachListRequest, opts ...grpc.CallOption) (*GetAttachListResponse, error) {
	out := new(GetAttachListResponse)
	err := c.cc.Invoke(ctx, "/note.Note/GetAttachList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteClient) GetSharedAttachList(ctx context.Context, in *GetSharedAttachListRequest, opts ...grpc.CallOption) (*GetAttachListResponse, error) {
	out := new(GetAttachListResponse)
	err := c.cc.Invoke(ctx, "/note.Note/GetSharedAttachList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NoteServer is the server API for Note service.
// All implementations must embed UnimplementedNoteServer
// for forward compatibility
type NoteServer interface {
	GetAllNotes(context.Context, *GetAllRequest) (*GetAllResponse, error)
	GetNote(context.Context, *GetNoteRequest) (*GetNoteResponseResponse, error)
	GetPublicNote(context.Context, *GetPublicNoteRequest) (*GetNoteResponseResponse, error)
	AddNote(context.Context, *AddNoteRequest) (*AddNoteResponse, error)
	UpdateNote(context.Context, *UpdateNoteRequest) (*UpdateNoteResponse, error)
	DeleteNote(context.Context, *DeleteNoteRequest) (*DeleteNoteResponse, error)
	CreateSubNote(context.Context, *CreateSubNoteRequest) (*CreateSubNoteResponse, error)
	AddCollaborator(context.Context, *AddCollaboratorRequest) (*AddCollaboratorResponse, error)
	AddTag(context.Context, *TagRequest) (*GetNoteResponse, error)
	DeleteTag(context.Context, *TagRequest) (*GetNoteResponse, error)
	GetTags(context.Context, *GetTagsRequest) (*GetTagsResponse, error)
	CheckPermissions(context.Context, *CheckPermissionsRequest) (*CheckPermissionsResponse, error)
	RememberTag(context.Context, *AllTagRequest) (*EmptyResponse, error)
	ForgetTag(context.Context, *AllTagRequest) (*EmptyResponse, error)
	UpdateTag(context.Context, *UpdateTagRequest) (*EmptyResponse, error)
	SetIcon(context.Context, *SetIconRequest) (*GetNoteResponse, error)
	SetHeader(context.Context, *SetHeaderRequest) (*GetNoteResponse, error)
	AddFav(context.Context, *ChangeFlagRequest) (*GetNoteResponse, error)
	DelFav(context.Context, *ChangeFlagRequest) (*GetNoteResponse, error)
	SetPublic(context.Context, *AccessModeRequest) (*GetNoteResponse, error)
	SetPrivate(context.Context, *AccessModeRequest) (*GetNoteResponse, error)
	GetAttachList(context.Context, *GetAttachListRequest) (*GetAttachListResponse, error)
	GetSharedAttachList(context.Context, *GetSharedAttachListRequest) (*GetAttachListResponse, error)
	mustEmbedUnimplementedNoteServer()
}

// UnimplementedNoteServer must be embedded to have forward compatible implementations.
type UnimplementedNoteServer struct {
}

func (UnimplementedNoteServer) GetAllNotes(context.Context, *GetAllRequest) (*GetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllNotes not implemented")
}
func (UnimplementedNoteServer) GetNote(context.Context, *GetNoteRequest) (*GetNoteResponseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNote not implemented")
}
func (UnimplementedNoteServer) GetPublicNote(context.Context, *GetPublicNoteRequest) (*GetNoteResponseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicNote not implemented")
}
func (UnimplementedNoteServer) AddNote(context.Context, *AddNoteRequest) (*AddNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNote not implemented")
}
func (UnimplementedNoteServer) UpdateNote(context.Context, *UpdateNoteRequest) (*UpdateNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNote not implemented")
}
func (UnimplementedNoteServer) DeleteNote(context.Context, *DeleteNoteRequest) (*DeleteNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNote not implemented")
}
func (UnimplementedNoteServer) CreateSubNote(context.Context, *CreateSubNoteRequest) (*CreateSubNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubNote not implemented")
}
func (UnimplementedNoteServer) AddCollaborator(context.Context, *AddCollaboratorRequest) (*AddCollaboratorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCollaborator not implemented")
}
func (UnimplementedNoteServer) AddTag(context.Context, *TagRequest) (*GetNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTag not implemented")
}
func (UnimplementedNoteServer) DeleteTag(context.Context, *TagRequest) (*GetNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTag not implemented")
}
func (UnimplementedNoteServer) GetTags(context.Context, *GetTagsRequest) (*GetTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTags not implemented")
}
func (UnimplementedNoteServer) CheckPermissions(context.Context, *CheckPermissionsRequest) (*CheckPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPermissions not implemented")
}
func (UnimplementedNoteServer) RememberTag(context.Context, *AllTagRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RememberTag not implemented")
}
func (UnimplementedNoteServer) ForgetTag(context.Context, *AllTagRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForgetTag not implemented")
}
func (UnimplementedNoteServer) UpdateTag(context.Context, *UpdateTagRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTag not implemented")
}
func (UnimplementedNoteServer) SetIcon(context.Context, *SetIconRequest) (*GetNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetIcon not implemented")
}
func (UnimplementedNoteServer) SetHeader(context.Context, *SetHeaderRequest) (*GetNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetHeader not implemented")
}
func (UnimplementedNoteServer) AddFav(context.Context, *ChangeFlagRequest) (*GetNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFav not implemented")
}
func (UnimplementedNoteServer) DelFav(context.Context, *ChangeFlagRequest) (*GetNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelFav not implemented")
}
func (UnimplementedNoteServer) SetPublic(context.Context, *AccessModeRequest) (*GetNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPublic not implemented")
}
func (UnimplementedNoteServer) SetPrivate(context.Context, *AccessModeRequest) (*GetNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPrivate not implemented")
}
func (UnimplementedNoteServer) GetAttachList(context.Context, *GetAttachListRequest) (*GetAttachListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttachList not implemented")
}
func (UnimplementedNoteServer) GetSharedAttachList(context.Context, *GetSharedAttachListRequest) (*GetAttachListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSharedAttachList not implemented")
}
func (UnimplementedNoteServer) mustEmbedUnimplementedNoteServer() {}

// UnsafeNoteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NoteServer will
// result in compilation errors.
type UnsafeNoteServer interface {
	mustEmbedUnimplementedNoteServer()
}

func RegisterNoteServer(s grpc.ServiceRegistrar, srv NoteServer) {
	s.RegisterService(&Note_ServiceDesc, srv)
}

func _Note_GetAllNotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServer).GetAllNotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/note.Note/GetAllNotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServer).GetAllNotes(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Note_GetNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServer).GetNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/note.Note/GetNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServer).GetNote(ctx, req.(*GetNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Note_GetPublicNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublicNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServer).GetPublicNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/note.Note/GetPublicNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServer).GetPublicNote(ctx, req.(*GetPublicNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Note_AddNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServer).AddNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/note.Note/AddNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServer).AddNote(ctx, req.(*AddNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Note_UpdateNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServer).UpdateNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/note.Note/UpdateNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServer).UpdateNote(ctx, req.(*UpdateNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Note_DeleteNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServer).DeleteNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/note.Note/DeleteNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServer).DeleteNote(ctx, req.(*DeleteNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Note_CreateSubNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServer).CreateSubNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/note.Note/CreateSubNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServer).CreateSubNote(ctx, req.(*CreateSubNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Note_AddCollaborator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCollaboratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServer).AddCollaborator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/note.Note/AddCollaborator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServer).AddCollaborator(ctx, req.(*AddCollaboratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Note_AddTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServer).AddTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/note.Note/AddTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServer).AddTag(ctx, req.(*TagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Note_DeleteTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServer).DeleteTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/note.Note/DeleteTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServer).DeleteTag(ctx, req.(*TagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Note_GetTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServer).GetTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/note.Note/GetTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServer).GetTags(ctx, req.(*GetTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Note_CheckPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServer).CheckPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/note.Note/CheckPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServer).CheckPermissions(ctx, req.(*CheckPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Note_RememberTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServer).RememberTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/note.Note/RememberTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServer).RememberTag(ctx, req.(*AllTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Note_ForgetTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServer).ForgetTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/note.Note/ForgetTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServer).ForgetTag(ctx, req.(*AllTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Note_UpdateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServer).UpdateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/note.Note/UpdateTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServer).UpdateTag(ctx, req.(*UpdateTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Note_SetIcon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetIconRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServer).SetIcon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/note.Note/SetIcon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServer).SetIcon(ctx, req.(*SetIconRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Note_SetHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetHeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServer).SetHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/note.Note/SetHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServer).SetHeader(ctx, req.(*SetHeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Note_AddFav_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeFlagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServer).AddFav(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/note.Note/AddFav",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServer).AddFav(ctx, req.(*ChangeFlagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Note_DelFav_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeFlagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServer).DelFav(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/note.Note/DelFav",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServer).DelFav(ctx, req.(*ChangeFlagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Note_SetPublic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServer).SetPublic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/note.Note/SetPublic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServer).SetPublic(ctx, req.(*AccessModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Note_SetPrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServer).SetPrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/note.Note/SetPrivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServer).SetPrivate(ctx, req.(*AccessModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Note_GetAttachList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttachListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServer).GetAttachList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/note.Note/GetAttachList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServer).GetAttachList(ctx, req.(*GetAttachListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Note_GetSharedAttachList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSharedAttachListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServer).GetSharedAttachList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/note.Note/GetSharedAttachList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServer).GetSharedAttachList(ctx, req.(*GetSharedAttachListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Note_ServiceDesc is the grpc.ServiceDesc for Note service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Note_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "note.Note",
	HandlerType: (*NoteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllNotes",
			Handler:    _Note_GetAllNotes_Handler,
		},
		{
			MethodName: "GetNote",
			Handler:    _Note_GetNote_Handler,
		},
		{
			MethodName: "GetPublicNote",
			Handler:    _Note_GetPublicNote_Handler,
		},
		{
			MethodName: "AddNote",
			Handler:    _Note_AddNote_Handler,
		},
		{
			MethodName: "UpdateNote",
			Handler:    _Note_UpdateNote_Handler,
		},
		{
			MethodName: "DeleteNote",
			Handler:    _Note_DeleteNote_Handler,
		},
		{
			MethodName: "CreateSubNote",
			Handler:    _Note_CreateSubNote_Handler,
		},
		{
			MethodName: "AddCollaborator",
			Handler:    _Note_AddCollaborator_Handler,
		},
		{
			MethodName: "AddTag",
			Handler:    _Note_AddTag_Handler,
		},
		{
			MethodName: "DeleteTag",
			Handler:    _Note_DeleteTag_Handler,
		},
		{
			MethodName: "GetTags",
			Handler:    _Note_GetTags_Handler,
		},
		{
			MethodName: "CheckPermissions",
			Handler:    _Note_CheckPermissions_Handler,
		},
		{
			MethodName: "RememberTag",
			Handler:    _Note_RememberTag_Handler,
		},
		{
			MethodName: "ForgetTag",
			Handler:    _Note_ForgetTag_Handler,
		},
		{
			MethodName: "UpdateTag",
			Handler:    _Note_UpdateTag_Handler,
		},
		{
			MethodName: "SetIcon",
			Handler:    _Note_SetIcon_Handler,
		},
		{
			MethodName: "SetHeader",
			Handler:    _Note_SetHeader_Handler,
		},
		{
			MethodName: "AddFav",
			Handler:    _Note_AddFav_Handler,
		},
		{
			MethodName: "DelFav",
			Handler:    _Note_DelFav_Handler,
		},
		{
			MethodName: "SetPublic",
			Handler:    _Note_SetPublic_Handler,
		},
		{
			MethodName: "SetPrivate",
			Handler:    _Note_SetPrivate_Handler,
		},
		{
			MethodName: "GetAttachList",
			Handler:    _Note_GetAttachList_Handler,
		},
		{
			MethodName: "GetSharedAttachList",
			Handler:    _Note_GetSharedAttachList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "note.proto",
}
