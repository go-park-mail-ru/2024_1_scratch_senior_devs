// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: stat.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StatClient is the client API for Stat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatClient interface {
	GetSurvey(ctx context.Context, in *GetSurveyRequest, opts ...grpc.CallOption) (*GetSurveyReposnse, error)
}

type statClient struct {
	cc grpc.ClientConnInterface
}

func NewStatClient(cc grpc.ClientConnInterface) StatClient {
	return &statClient{cc}
}

func (c *statClient) GetSurvey(ctx context.Context, in *GetSurveyRequest, opts ...grpc.CallOption) (*GetSurveyReposnse, error) {
	out := new(GetSurveyReposnse)
	err := c.cc.Invoke(ctx, "/note.Stat/GetSurvey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatServer is the server API for Stat service.
// All implementations must embed UnimplementedStatServer
// for forward compatibility
type StatServer interface {
	GetSurvey(context.Context, *GetSurveyRequest) (*GetSurveyReposnse, error)
	mustEmbedUnimplementedStatServer()
}

// UnimplementedStatServer must be embedded to have forward compatible implementations.
type UnimplementedStatServer struct {
}

func (UnimplementedStatServer) GetSurvey(context.Context, *GetSurveyRequest) (*GetSurveyReposnse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSurvey not implemented")
}
func (UnimplementedStatServer) mustEmbedUnimplementedStatServer() {}

// UnsafeStatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatServer will
// result in compilation errors.
type UnsafeStatServer interface {
	mustEmbedUnimplementedStatServer()
}

func RegisterStatServer(s grpc.ServiceRegistrar, srv StatServer) {
	s.RegisterService(&Stat_ServiceDesc, srv)
}

func _Stat_GetSurvey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSurveyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatServer).GetSurvey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/note.Stat/GetSurvey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatServer).GetSurvey(ctx, req.(*GetSurveyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Stat_ServiceDesc is the grpc.ServiceDesc for Stat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Stat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "note.Stat",
	HandlerType: (*StatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSurvey",
			Handler:    _Stat_GetSurvey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stat.proto",
}
