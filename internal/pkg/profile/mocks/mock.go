// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock_profile is a generated GoMock package.
package mock_profile

import (
	context "context"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2024_1_scratch_senior_devs/internal/models"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/satori/uuid"
)

// MockProfileUsecase is a mock of ProfileUsecase interface.
type MockProfileUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockProfileUsecaseMockRecorder
}

// MockProfileUsecaseMockRecorder is the mock recorder for MockProfileUsecase.
type MockProfileUsecaseMockRecorder struct {
	mock *MockProfileUsecase
}

// NewMockProfileUsecase creates a new mock instance.
func NewMockProfileUsecase(ctrl *gomock.Controller) *MockProfileUsecase {
	mock := &MockProfileUsecase{ctrl: ctrl}
	mock.recorder = &MockProfileUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfileUsecase) EXPECT() *MockProfileUsecaseMockRecorder {
	return m.recorder
}

// UpdateProfile mocks base method.
func (m *MockProfileUsecase) UpdateProfile(arg0 context.Context, arg1 uuid.UUID, arg2 models.ProfileUpdatePayload) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockProfileUsecaseMockRecorder) UpdateProfile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockProfileUsecase)(nil).UpdateProfile), arg0, arg1, arg2)
}

// MockProfileRepo is a mock of ProfileRepo interface.
type MockProfileRepo struct {
	ctrl     *gomock.Controller
	recorder *MockProfileRepoMockRecorder
}

// MockProfileRepoMockRecorder is the mock recorder for MockProfileRepo.
type MockProfileRepoMockRecorder struct {
	mock *MockProfileRepo
}

// NewMockProfileRepo creates a new mock instance.
func NewMockProfileRepo(ctrl *gomock.Controller) *MockProfileRepo {
	mock := &MockProfileRepo{ctrl: ctrl}
	mock.recorder = &MockProfileRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfileRepo) EXPECT() *MockProfileRepoMockRecorder {
	return m.recorder
}

// GetUserById mocks base method.
func (m *MockProfileRepo) GetUserById(arg0 context.Context, arg1 uuid.UUID) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", arg0, arg1)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockProfileRepoMockRecorder) GetUserById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockProfileRepo)(nil).GetUserById), arg0, arg1)
}

// UpdateProfile mocks base method.
func (m *MockProfileRepo) UpdateProfile(arg0 context.Context, arg1 models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockProfileRepoMockRecorder) UpdateProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockProfileRepo)(nil).UpdateProfile), arg0, arg1)
}
